
#ifndef		_SERVER_HH_
# define	_SERVER_HH_

# define	_ERROR			0
# define	_SUCCESS		!(_ERROR)
# define	_MAX_CLIENTS		100
# define	_TIME_SELECT		1
# define	_U_TIME_SELECT		0
# define	_READ_SIZE		4096
# define	_LISTEN_PORT		2609
# define	_UNKNOWN_CLIENT		std::string("unknown_client")
# define	_SEPARATOR_CLIENT	'#'
# define	_EXTENSION_DATAFILE	".spider"
# define	_EXTENSION_PASSWDFILE	".password"
# define	_PASSWD_PROTOCOL	"<PASSWORD>"
# define	_PATH_DATADIR		std::string("./dataStock/")

#include <unistd.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <stdio.h>
/** For graphic interface
#include "mainwindow.h"
**/
#include <sys/types.h>
#include <string.h>
#include <iostream>
#include <fstream>
#include <map>
#include <thread>
#include "EncryptData.hh"

/** For graphic interface
class  MainWindow;
**/

class Server
{
public:
  Server();
  ~Server();

  int				initServer(const uint16_t port);
  int				loopServer();

  /** For graphic interface
  void				setMainWindow(MainWindow *window);
  void				setEnd(const bool end);
  **/

private:
  // Methods
  int				putError(const std::string &msg);
  void				setFd_forCallback();
  int				receiveMsg_fromClient(EncryptData &uncrypter);
  void				storeData(std::map<std::string, int>::iterator &it);
  void				decryptMessage();
  bool				dataArePassword();

  // Attributes
  int				_fd_max;
  int				_sock;
  struct sockaddr_in		_data;
  int				_sock_client;
  struct sockaddr_in		_data_client;
  unsigned int			_data_client_size;
  fd_set			_readf;
  std::string			_msg;
  std::map<std::string, int>	_mapClients;

  /**  For graphic interface
  MainWindow			*_window;
  bool				_end;
  **/
};

#endif	/* !_SERVER_HH_ */
