
#ifndef __ENCRYPT__HH__
# define __ENCRYPT__HH__

# define	_BUFFER_SIZE			1024
# define	_ENCRYPT_BITS			256

#include <fstream>
#include <iostream>
#include <stdio.h>
#include <string>
#include <algorithm>
#include <vector>
#include "openssl\include\openssl\aes.h"

class EncryptData
{
public:
	EncryptData();
	~EncryptData();
	
	const std::string					encryptBuffer(const std::string buffer);
	const std::string					decryptBuffer(const std::string buffer);
	const std::string					encryptData(const std::string content);
	const std::string					decryptData(const std::string content);
private:
	// Methods
	const std::string					sslEncrypt(const std::string &content);
	const std::string					sslDecrypt(const std::string &content);
	const std::string					decrypt(const void *buffer_toEncrypt, size_t buffer_toEncrypt_size, const void* asciiKey, size_t asciiKeySize);
	const std::string					encrypt(const void *buffer_toEncrypt, size_t buffer_toEncrypt_size, const void* asciiKey, size_t asciiKeySize);
	const std::string					translateKey(const void *asciiKey, size_t asciiKey_size) const;
	size_t								paddingSize(const size_t len) const;
	static inline bool					is_base64(unsigned char c);
	std::string							base64_encode(unsigned char const* bytes_to_encode, unsigned int in_len);
	std::string							base64_decode(std::string const& encoded_string);

	// Attributes
	std::vector<char>					aIVector;
	std::string							oneKey;
	bool								initVector;
};

#endif /* !__ENCRYPT__HH__ */