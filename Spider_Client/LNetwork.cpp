
#include "stdafx.h"
#include "LNetwork.hh"

LNetwork::LNetwork()
{
}

LNetwork::~LNetwork()
{
}

const int			LNetwork::putError(const std::string &msg)
{
	std::cerr << msg.c_str() << std::endl;
	return (_ERROR);
}

const int			LNetwork::initClient(const char *addr, const uint16_t port)
{
	WSADATA	wsaData;

	this->_data.sin_addr.s_addr = inet_addr(addr);
	this->_data.sin_family = AF_INET;
	this->_data.sin_port = htons((uint16_t)port);
	if ((_sock = socket(AF_INET, SOCK_STREAM, 0)) == -1)
		return (putError("[KO]\tError: socket creation failed"));
	std::cout << "Client initialized on socket " << _sock << std::endl;
	return (_SUCCESS);
}

const int			LNetwork::connectToServer()
{
	if (connect(_sock, (struct sockaddr*)&_data, sizeof(struct sockaddr_in)) == -1)
		return (putError("[KO]\tError: connect failed"));
	std::cout << "Client connected" << std::endl;
	return (_SUCCESS);
}

const int			LNetwork::sendToServer(void const *data, size_t size)
{
	int pos = 0;

	while ((pos += sendto(_sock, &((char*)data)[pos], size - pos, 0, (sockaddr *)&_data, sizeof(sockaddr_in))) != (int)size && pos != -1);
	return (pos);
}

const int			LNetwork::receiveFromServer(void *data, unsigned int size)
{
	socklen_t len = sizeof(sockaddr_in);
	return static_cast<int>(recvfrom(_sock, (char*)data, size, 0, (sockaddr *)&_data, &len));
}